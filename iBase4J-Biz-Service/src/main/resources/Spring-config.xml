<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:util="http://www.springframework.org/schema/util"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-4.0.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
    <!-- 引入属性配置文件 -->
	<bean id="tcpServer" class="cn.ac.sec.server.NettyTCPServer" destroy-method="stopServer">
		<constructor-arg ref="tcpConfig"/>
		<constructor-arg ref="myChannelInitializer"/>
	</bean>
	<bean id="myChannelInitializer" class="cn.ac.sec.server.MyChannelInitializer"/>
	<bean id="tcpConfig" class="cn.ac.sec.server.NettyConfig">
		<property name="channelOptions" ref="tcpChannelOptions"/>
		<property name="bossGroup" ref="bossGroup"/>
		<property name="workerGroup" ref="workerGroup"/>
		<property name="portNumber" value="18080"/>
	</bean>

	<util:map id="tcpChannelOptions" map-class="java.util.HashMap">
		<entry>
			<key><util:constant static-field="io.netty.channel.ChannelOption.SO_KEEPALIVE"/></key>
			<value type="java.lang.Boolean">true</value>
		</entry>
		<entry>
			<key><util:constant static-field="io.netty.channel.ChannelOption.SO_BACKLOG"/></key>
			<value type="java.lang.Integer">100</value>
		</entry>
	</util:map>

	<bean id="bossGroup" class="io.netty.channel.nio.NioEventLoopGroup" destroy-method="shutdownGracefully">
		<constructor-arg type="int" index="0" value="2" />
		<constructor-arg index="1" ref="bossThreadFactory" />
	</bean>

	<bean id="workerGroup" class="io.netty.channel.nio.NioEventLoopGroup" destroy-method="shutdownGracefully">
		<constructor-arg type="int" index="0"
						 value="8" />
		<constructor-arg index="1" ref="workerThreadFactory" />
	</bean>

	<bean id="bossThreadFactory" class="cn.ac.sec.server.NamedThreadFactory">
		<constructor-arg type="java.lang.String" value="Server-Boss" />
	</bean>

	<bean id="workerThreadFactory" class="cn.ac.sec.server.NamedThreadFactory">
		<constructor-arg type="java.lang.String" index="0" value="Server-Worker" />
	</bean>


	<bean class="org.ibase4j.core.util.PropertiesUtil">
		<property name="locations">
			<list>
				<value>${sys.jdbc.config.path}</value>
				<value>${system.config.path}</value>
			</list>
		</property>
		<property name="properties">
			<props>
				<!-- dubbo个性化配置(服务名,端口) -->
				<prop key="rpc.registry.name">${project.artifactId}</prop>
				<prop key="rpc.protocol.port">1${server.port}</prop>
			</props>
		</property>
		<property name="decryptProperties">
			<array>
				<!-- 需要解密的配置 -->
				<value>db.reader.password</value>
				<value>db.writer.password</value>
			</array>
		</property>
	</bean>
	<!-- 扫描注解 -->
	<context:component-scan base-package="org.ibase4j,cn.ac.sec">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
		<!--<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>-->
		<!--<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Component"/>-->
	</context:component-scan>
	<!-- 引入SPRING配置文件 -->
	<!-- <import resource="spring/mq.xml"/> -->
	<!-- <import resource="spring/dubbo.xml" /> -->
	<import resource="spring/motan.xml" />
	<import resource="spring/redis.xml" />
	<import resource="spring/redisson.xml" />
    <import resource="config/mybatis.xml"/>
	<import resource="spring/dataSource.xml"/>
</beans>